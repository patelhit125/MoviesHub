{"version":3,"sources":["components/CastList.js"],"names":["CastList","props","data","setData","useState","id","name","ref","useRef","api","API_MOVIE","API_KEY","API_TV","useEffect","async","axios","get","then","cast","catch","error","console","getData","_jsx","_Fragment","children","length","_jsxs","className","onClick","scrollRight","scrollOffset","current","scrollLeft","scrollWidth","clientWidth","classList","remove","add","FiChevronLeft","log","FiChevronRight","map","dataRow","index","_dataRow$character","Link","to","LazyLoadImage","src","POSTER_PATH","WIDTH_300","profile_path","effect","alt","onError","e","target","onerror","frame1","character","row","total_episode_count"],"mappings":"uGAAA,kFAgGeA,UAxFGC,IAEhB,MAAOC,EAAMC,GAAWC,mBAAS,KAC3B,GAAEC,EAAE,KAAEC,GAASL,EAEfM,EAAMC,iBAAO,MAEnB,IAAIC,EACJ,OAAQH,GACN,IAAK,QACHG,EAAMC,IAAYL,EAAK,oBAAsBM,IAC7C,MAEF,IAAK,KACHF,EAAMG,IAASP,EAAK,8BAAgCM,IAOxDE,qBAAU,KACQC,WACdC,IAAMC,IAAIP,GACPQ,MAAMf,IACLC,EAAQD,EAAKA,KAAKgB,SAEnBC,OAAOC,IACNC,QAAQD,MAAMA,OAIpBE,KACC,CAACb,EAAKJ,IAuBT,OACEkB,cAAAC,WAAA,CAAAC,SACGvB,EAAKwB,OAAS,GACbC,eAAA,OAAKC,UAAU,oBAAmBH,SAAA,CAChCF,cAAA,MAAIK,UAAU,eAAcH,SAAC,SAC7BE,eAAA,OAAKC,UAAU,gBAAgBrB,IAAKA,EAAIkB,SAAA,CACtCF,cAAA,UAAQK,UAAU,gEAAgEC,QAASA,KAAMC,OA3BtFC,EA2BkG,IA1BrHxB,EAAIyB,QAAQC,YAAcF,EACpBxB,EAAIyB,QAAQC,WAAc1B,EAAIyB,QAAQE,YAAyC,KAA1B3B,EAAIyB,QAAQG,aACrE5B,EAAIyB,QAAQP,SAAS,GAAGW,UAAUC,OAAO,aAEvC9B,EAAIyB,QAAQC,YAAc,KAC5B1B,EAAIyB,QAAQP,SAAS,GAAGW,UAAUE,IAAI,SANrBP,OA2BuGN,SAACF,cAACgB,IAAa,MACjIhB,cAAA,UAAQK,UAAU,2DAA2DC,QAASA,KAAMI,OAlBlFF,EAkB6F,IAjB/GxB,EAAIyB,QAAQC,YAAcF,EAC1BV,QAAQmB,IAAIjC,EAAIyB,QAAQC,WAAa1B,EAAIyB,QAAQE,YAAyC,IAA1B3B,EAAIyB,QAAQG,aACtE5B,EAAIyB,QAAQC,WAAc1B,EAAIyB,QAAQE,YAAyC,IAA1B3B,EAAIyB,QAAQG,aACrE5B,EAAIyB,QAAQP,SAAS,GAAGW,UAAUE,IAAI,aAEpC/B,EAAIyB,QAAQC,YAAc,GAC5B1B,EAAIyB,QAAQP,SAAS,GAAGW,UAAUC,OAAO,SAPzBN,OAkBkGN,SAACF,cAACkB,IAAc,MAC3HvC,EAAKwC,KAAI,CAACC,EAASC,KAAK,IAAAC,EAAA,OACvBtB,cAACuB,IAAI,CAAalB,UAAU,kBAAkBmB,GAAI,qBAAuBJ,EAAQtC,GAAGoB,SAClFE,eAAA,OAAKC,UAAU,kBAAiBH,SAAA,CAC9BF,cAAA,OAAKK,UAAU,qCAAoCH,SACjDF,cAACyB,gBAAa,CAACpB,UAAU,iBAAiBqB,IAAKC,IAAcC,IAAYR,EAAQS,aAAcC,OAAO,UAAUC,IAAKX,EAAQrC,KAAMiD,QAAUC,IAAQA,EAAEC,OAAOC,QAAU,KAAMF,EAAEC,OAAOR,IAAMU,SAE/LpC,cAAA,OAAKK,UAAU,YAAWH,SACxBE,eAAA,OAAKC,UAAU,6BAA4BH,SAAA,CACzCF,cAAA,OAAAE,SAAMkB,EAAQrC,OACdiB,cAAA,OAAKK,UAAU,kBAAiBH,UAAsB,QAApBoB,EAAAF,EAAmB,iBAAC,IAAAE,OAAA,EAApBA,EAAsBnB,SAAU,EAAIiB,EAAQiB,UAAYjB,EAAe,MAAED,KAAI,CAACmB,EAAKjB,IACnHrB,cAAA,QAAMK,UAAU,QAAOH,SAAcoC,EAAID,WAAZhB,OAE9BD,EAAQmB,qBAAuBnC,eAAA,OAAKC,UAAU,aAAYH,SAAA,CAAC,IAAEkB,EAAQmB,oBAAoB,uBAV1DlB,IAD7BA","file":"static/js/7.2af3c341.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { API_MOVIE, API_KEY, POSTER_PATH, WIDTH_300, API_TV } from '../constant';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\r\nimport axios from 'axios';\r\nimport frame1 from '../resources/Frame1.png'\r\n\r\nconst CastList = (props) => {\r\n\r\n  const [data, setData] = useState([]);\r\n  const { id, name } = props;\r\n\r\n  const ref = useRef(null);\r\n\r\n  let api;\r\n  switch (name) {\r\n    case 'movie':\r\n      api = API_MOVIE + id + '/credits?api_key=' + API_KEY;\r\n      break;\r\n\r\n    case 'tv':\r\n      api = API_TV + id + '/aggregate_credits?api_key=' + API_KEY;\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      axios.get(api)\r\n        .then((data) => {\r\n          setData(data.data.cast);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        })\r\n    }\r\n\r\n    getData();\r\n  }, [api, id]);\r\n\r\n  const scrollRight = (scrollOffset) => {\r\n    ref.current.scrollLeft -= scrollOffset;\r\n    if (!(ref.current.scrollLeft < (ref.current.scrollWidth - (ref.current.clientWidth * 1.25)))) {\r\n      ref.current.children[1].classList.remove('hide');\r\n    }\r\n    if (ref.current.scrollLeft <= 500) {\r\n      ref.current.children[0].classList.add('hide');\r\n    }\r\n  };\r\n\r\n  const scrollLeft = (scrollOffset) => {\r\n    ref.current.scrollLeft += scrollOffset;\r\n    console.log(ref.current.scrollLeft, (ref.current.scrollWidth - (ref.current.clientWidth * 1.5)))\r\n    if (!(ref.current.scrollLeft < (ref.current.scrollWidth - (ref.current.clientWidth * 1.5)))) {\r\n      ref.current.children[1].classList.add('hide');\r\n    }\r\n    if (ref.current.scrollLeft >= 0) {\r\n      ref.current.children[0].classList.remove('hide');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {data.length > 0 &&\r\n        <div className=\"position-relative\">\r\n          <h2 className=\"mt-5 fw-bold\">CAST</h2>\r\n          <div className=\"cast-row mt-3\" ref={ref}>\r\n            <button className=\"btn btn-outline-primary position-absolute scroll-button1 hide\" onClick={() => scrollRight(500)}><FiChevronLeft /></button>\r\n            <button className=\"btn btn-outline-primary position-absolute scroll-button2\" onClick={() => scrollLeft(500)}><FiChevronRight /></button>\r\n            {data.map((dataRow, index) => (\r\n              <Link key={index} className=\"aLink card-link\" to={'/movieshub/people/' + dataRow.id}>\r\n                <div className=\"card frameWidth\" key={index}>\r\n                  <div className=\"card-img-top cast-img rounded-pill\">\r\n                    <LazyLoadImage className=\"img-fluid cast\" src={POSTER_PATH + WIDTH_300 + dataRow.profile_path} effect=\"opacity\" alt={dataRow.name} onError={(e) => { e.target.onerror = null; e.target.src = frame1 }} />\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"card-text text-center mt-2\">\r\n                      <div>{dataRow.name}</div>\r\n                      <div className=\"text-muted mt-1\">{dataRow['character']?.length >= 0 ? dataRow.character : dataRow['roles'].map((row, index) => (\r\n                        <span className=\"genre\" key={index}>{row.character}</span>\r\n                      ))}</div>\r\n                      {dataRow.total_episode_count && <div className=\"text-muted\">[{dataRow.total_episode_count} Episodes]</div>}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CastList\r\n"],"sourceRoot":""}