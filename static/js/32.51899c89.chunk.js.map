{"version":3,"sources":["components/Season.js"],"names":["Season","props","id","data","setData","useState","useEffect","async","axios","get","API_TV","API_KEY","then","seasons","catch","error","console","getData","ref","useRef","_jsx","_Fragment","children","length","_jsxs","className","onClick","scrollRight","scrollOffset","current","scrollLeft","scrollWidth","clientWidth","classList","remove","add","FiChevronLeft","FiChevronRight","map","dataRow","index","Link","to","season_number","LazyLoadImage","src","POSTER_PATH","WIDTH_500","poster_path","effect","alt","title","name","onError","e","target","onerror","frame1","air_date","getDateShortest","episode_count"],"mappings":"yGAAA,kFA8EeA,UAtECC,IACd,MAAM,GAAEC,GAAOD,GACRE,EAAMC,GAAWC,mBAAS,IAEjCC,qBAAU,KACQC,WACdC,IAAMC,IAAIC,IAASR,EAAK,YAAcS,KACnCC,MAAMT,IACLC,EAAQD,EAAKA,KAAKU,YAEnBC,OAAOC,IACNC,QAAQD,MAAMA,OAIpBE,KACC,CAACf,IAEJ,MAAMgB,EAAMC,iBAAO,MAsBnB,OACEC,cAAAC,WAAA,CAAAC,SACGnB,EAAKoB,OAAS,GACbC,eAAA,OAAKC,UAAU,yBAAwBH,SAAA,CACrCF,cAAA,MAAIK,UAAU,UAASH,SAAC,YACxBE,eAAA,OAAKC,UAAU,uBAAuBP,IAAKA,EAAII,SAAA,CAC7CF,cAAA,UAAQK,UAAU,gEAAgEC,QAASA,KAAMC,OA1BtFC,EA0BkG,IAzBrHV,EAAIW,QAAQC,YAAcF,EACpBV,EAAIW,QAAQC,WAAcZ,EAAIW,QAAQE,YAAyC,KAA1Bb,EAAIW,QAAQG,aACrEd,EAAIW,QAAQP,SAAS,GAAGW,UAAUC,OAAO,aAEvChB,EAAIW,QAAQC,YAAc,KAC5BZ,EAAIW,QAAQP,SAAS,GAAGW,UAAUE,IAAI,SANrBP,OA0BuGN,SAACF,cAACgB,IAAa,MACjIhB,cAAA,UAAQK,UAAU,2DAA2DC,QAASA,KAAMI,OAjBlFF,EAiB6F,IAhB/GV,EAAIW,QAAQC,YAAcF,EACpBV,EAAIW,QAAQC,WAAcZ,EAAIW,QAAQE,YAAyC,KAA1Bb,EAAIW,QAAQG,aACrEd,EAAIW,QAAQP,SAAS,GAAGW,UAAUE,IAAI,aAEpCjB,EAAIW,QAAQC,YAAc,GAC5BZ,EAAIW,QAAQP,SAAS,GAAGW,UAAUC,OAAO,SANzBN,OAiBkGN,SAACF,cAACiB,IAAc,MAC3HlC,EAAKmC,KAAI,CAACC,EAASC,IAClBpB,cAACqB,IAAI,CAAahB,UAAU,kBAAkBiB,GAAI,iBAAmBxC,EAAK,WAAaqC,EAAQI,cAAcrB,SAC3GE,eAAA,OAAKC,UAAU,kBAAiBH,SAAA,CAC9BF,cAAA,OAAKK,UAAU,uBAAsBH,SACnCF,cAACwB,gBAAa,CAACnB,UAAU,YAAYoB,IAAKC,IAAcC,IAAYR,EAAQS,YAAaC,OAAO,UAAUC,IAAKX,EAAQY,MAAQZ,EAAQY,MAAQZ,EAAQa,KAAMC,QAAUC,IAAQA,EAAEC,OAAOC,QAAU,KAAMF,EAAEC,OAAOV,IAAMY,SAEzNrC,cAAA,OAAKK,UAAU,YAAWH,SACxBE,eAAA,OAAKC,UAAU,YAAWH,SAAA,CACxBF,cAAA,OAAKK,UAAU,aAAYH,SAAEiB,EAAQmB,UAAYC,YAAgBpB,EAAQmB,YACzEtC,cAAA,OAAKK,UAAU,OAAMH,SAAEiB,EAAQY,MAAQZ,EAAQY,MAAQZ,EAAQa,OAC/D5B,eAAA,OAAKC,UAAU,kBAAiBH,SAAA,CAAEiB,EAAQqB,cAAc,sBARxBpB,IAD7BA","file":"static/js/32.51899c89.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { API_KEY, POSTER_PATH, WIDTH_500, API_TV, getDateShortest } from '../constant';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\r\nimport axios from 'axios';\r\nimport frame1 from '../resources/Frame1.png'\r\n\r\nconst Season = (props) => {\r\n  const { id } = props;\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      axios.get(API_TV + id + '?api_key=' + API_KEY)\r\n        .then((data) => {\r\n          setData(data.data.seasons);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        })\r\n    }\r\n\r\n    getData();\r\n  }, [id]);\r\n\r\n  const ref = useRef(null);\r\n\r\n  const scrollRight = (scrollOffset) => {\r\n    ref.current.scrollLeft -= scrollOffset;\r\n    if (!(ref.current.scrollLeft < (ref.current.scrollWidth - (ref.current.clientWidth * 1.25)))) {\r\n      ref.current.children[1].classList.remove('hide');\r\n    }\r\n    if (ref.current.scrollLeft <= 500) {\r\n      ref.current.children[0].classList.add('hide');\r\n    }\r\n  };\r\n\r\n  const scrollLeft = (scrollOffset) => {\r\n    ref.current.scrollLeft += scrollOffset;\r\n    if (!(ref.current.scrollLeft < (ref.current.scrollWidth - (ref.current.clientWidth * 1.25)))) {\r\n      ref.current.children[1].classList.add('hide');\r\n    }\r\n    if (ref.current.scrollLeft >= 0) {\r\n      ref.current.children[0].classList.remove('hide');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {data.length > 0 &&\r\n        <div className=\"mt-5 position-relative\">\r\n          <h2 className='fw-bold'>SEASONS</h2>\r\n          <div className=\"d-flex flex-row mt-3\" ref={ref}>\r\n            <button className=\"btn btn-outline-primary position-absolute scroll-button1 hide\" onClick={() => scrollRight(500)}><FiChevronLeft /></button>\r\n            <button className=\"btn btn-outline-primary position-absolute scroll-button2\" onClick={() => scrollLeft(500)}><FiChevronRight /></button>\r\n            {data.map((dataRow, index) => (\r\n              <Link key={index} className=\"aLink card-link\" to={'/movieshub/tv/' + id + '/season/' + dataRow.season_number}>\r\n                <div className=\"card frameWidth\" key={index}>\r\n                  <div className='card-img-top rounded'>\r\n                    <LazyLoadImage className=\"img-fluid\" src={POSTER_PATH + WIDTH_500 + dataRow.poster_path} effect=\"opacity\" alt={dataRow.title ? dataRow.title : dataRow.name} onError={(e) => { e.target.onerror = null; e.target.src = frame1 }} />\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"card-text\">\r\n                      <div className='text-muted'>{dataRow.air_date && getDateShortest(dataRow.air_date)}</div>\r\n                      <div className='mt-1'>{dataRow.title ? dataRow.title : dataRow.name}</div>\r\n                      <div className=\"text-muted mt-1\">{dataRow.episode_count} Episodes</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Season\r\n"],"sourceRoot":""}